from core.base import BaseFuzzer

from api_interface.request_engine import RequestEngine
from core.pentest_fuzzer.routines import SQLIGenerator, RequestFlooder

from core.sample_fuzzer import SampleFuzzer


class PentestFuzzer(BaseFuzzer):
    """
        Pentest Fuzzer
    9"""

    def __init__(self, iterations: int = None, workers: int = None) -> None:
        super().__init__(iterations)
        self._requestEngines = dict()
        self.workers = workers if workers else 16
        for endpointName, endpointDetails in self._endpoints.items():
            self._requestEngines[endpointName] = RequestEngine(endpoint_name=endpointName, fuzzer_type="pentest")

    def fuzz_all(self):
        for endpointName, endpointDetails in self._endpoints.items():
            self.fuzz(self._requestEngines[endpointName], endpointName)

    def fuzz(self, requestEngine, endpointName) -> None:
        endpointDetails = self._API_CONFIGURATION["endpoints"][endpointName]
        requestMethod = endpointDetails["method"]
        payloadStructure = endpointDetails["payload"]

        # SQL Injection
        # sqli = SQLIGenerator()
        # for _ in range(self.iterations):
        #     payloadGenerated = self.generateSQLIPayload(payloadStructure, sqli)
        #     if requestMethod == "GET":
        #         requestEngine.send_request(params=payloadGenerated)
        #     elif requestMethod in ["PUT", "POST", "UPDATE"]:
        #         requestEngine.send_request(json=payloadGenerated)
        #     elif requestMethod in ["DELETE", "OPTIONS"]:
        #         requestEngine.send_request()

        # Throttling
        if requestMethod == "GET":
            analogous_sample_fuzzer = SampleFuzzer()
            sample_payload = analogous_sample_fuzzer.generatePayload(payloadStructure)
            request_flooder = RequestFlooder(requestEngine, sample_payload, self.workers)

            results = [request_flooder.flood(rate=2**i) for i in range(4, 10)]
            print(results)

    def generateSQLIPayload(self, payload_configuration, sqli):
        if payload_configuration is None:
            return None
        payload = None
        if payload_configuration["data_type"] == dict:
            payload = {}
            for key, value in payload_configuration["children"].items():
                payload[key] = self.generateSQLIPayload(value)
        else:
            payload = sqli.generate()
        return payload
