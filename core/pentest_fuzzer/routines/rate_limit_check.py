from queue import Queue
from threading import Thread
import time

from api_interface.request_engine import RequestEngine
from typing import Dict, List, Union


class _Worker(Thread):
    """Thread executing tasks from a given queue"""

    def __init__(self, tasks) -> None:
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kwargs = self.tasks.get()
            try:
                func(*args, **kwargs)
            except Exception as e:
                print(e)
            finally:
                self.tasks.task_done()


class _ThreadPool:
    """Pool of threads consuming tasks from a queue"""

    def __init__(self, num_threads: int):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            _Worker(self.tasks)

    def add_task(self, func, *args, **kwargs):
        self.tasks.put((func, args, kwargs))

    def wait_completion(self):
        self.tasks.join()


class RequestFlooder:
    def __init__(self, requestEngine: RequestEngine, samplePayload: Union[Dict, List], workers: int = 16) -> None:
        self.requestEngine = requestEngine
        self.samplePayload = samplePayload
        self.workers = workers

    def make_request(self, response_codes: Dict):
        response = self.requestEngine.send_request(params=self.samplePayload, log_details=False)
        response_codes[response["status"]] = response_codes.get(response["status"], 0) + 1

    def flood(self, rate: int = 1, timeout: int = 5) -> None:
        """Flood the target with specified rate (per second)"""
        pool = _ThreadPool(self.workers)
        response_codes = {}

        for i in range(timeout):
            print(f"Rate: {rate}, iteration: {i}")
            time_start = time.time()
            for _ in range(rate):
                pool.add_task(self.make_request, response_codes=response_codes)
            time.sleep(max(0, 1 - (time.time() - time_start)))

        return response_codes
